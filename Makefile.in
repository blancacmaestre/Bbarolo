FLAGS = -O2 -ftree-vectorize -fPIC -Wuninitialized -std=c++11 @OPENMP_CXXFLAGS@ @CFLAGS@
#-march=native
#FLAGS = -O0 -g -fbounds-check -Wall -Wextra @OPENMP_CXXFLAGS@ @CFLAGS@
#FLAGS = -fast -Wall @OPENMP_CXXFLAGS@ @CFLAGS@
#WCSFLAGS = `pkg-config --cflags --libs wcslib`

OPS = @OP@
CC  = @CC@ $(CFLAGS) $(FLAGS)
CXX = @CXX@ $(CFLAGS) $(FLAGS)
LINK= @CXX@ $(CFLAGS) $(FLAGS) -flto

BASE = @BASEDIR@

INSTALLDIR = @prefix@/bin
LIBDIR = @prefix@/lib
INCDIR = @prefix@/include/bbarolo

V = @PACKAGE_VERSION@
EXEC = BBarolo-$(V)
EXEC-STUB = BBarolo


AR = ar cq
LIB = libBBarolo-$(V).a
LIB_LN = libBBarolo.a
RANLIB = ranlib
SHAREDLIB = @SHRLD@
#SHAREDFLAGS = -shared -Wl,-soname,@SHRLIB@
LIBSO = @SHRLIB@
LIBSO_LN = @SHRLN@

INSTALL = @INSTALL@
LN_S = @LN_S@

CFITSIOINC = @CFITSIOINC@
CFITSIOLIB = @CFITSIOLIB@

FFTW3INC = @FFTW3INC@
FFTW3LIB = @FFTW3LIB@ 

WCSINC = @WCSINC@
WCSLIB = @WCSLIB@

PYINC = @PYTHON_INCLUDE@
PYLIB = @PYTHON_LIBS@

OPT = @GNUPLOT@ @FFTW3@ @HAVEPYTHON@ @HAVEMPI@
ifeq ($(OPS),MACOSX)
	OPT += -DMACOSX
endif
#OPT += -DDOUBLE_PRECISION

OTHERLIB = -lm 

CINC = -I$(BASE) $(FFTW3INC) $(CFITSIOINC) $(WCSINC) #$(PYINC)

LIBS = $(FFTW3LIB) $(CFITSIOLIB) $(WCSLIB) $(OTHERLIB) #$(PYLIB)
STATICLIBS = @STATICLIBS@ -lcurl
#$(PYLIB)/libpython3.6.a

ARRAYDIR = $(BASE)/Arrays
MAPDIR = $(BASE)/Map
UTILDIR = $(BASE)/Utilities
TASKDIR = $(BASE)/Tasks
PYBBDIR = $(BASE)/../pyBBarolo
OBJDIR = $(BASE)/Build

HEADS = $(ARRAYDIR)/param.hh\
	$(ARRAYDIR)/header.hh\
	$(ARRAYDIR)/array.hpp\
	$(ARRAYDIR)/cube.hh\
	$(ARRAYDIR)/image.hh\
	$(ARRAYDIR)/stats.hh\
	$(ARRAYDIR)/rings.hh\
	$(MAPDIR)/voxel.hh\
	$(MAPDIR)/scan.hh\
	$(MAPDIR)/object2D.hh\
	$(MAPDIR)/object3D.hh\
	$(MAPDIR)/detection.hh\
	$(MAPDIR)/objectgrower.hh\
	$(UTILDIR)/gnuplot.hh\
	$(UTILDIR)/progressbar.hh\
	$(UTILDIR)/lsqfit.hh\
	$(UTILDIR)/paramguess.hh\
	$(UTILDIR)/conv2D.hh\
	$(UTILDIR)/utils.hh\
	$(UTILDIR)/converter.hh\
	$(UTILDIR)/allocator.hpp\
	$(UTILDIR)/optimization.hh\
	$(TASKDIR)/galmod.hh\
	$(TASKDIR)/ringmodel.hh\
	$(TASKDIR)/galfit.hh\
	$(TASKDIR)/smooth3D.hh\
	$(TASKDIR)/galwind.hh\
	$(TASKDIR)/ellprof.hh\
	$(TASKDIR)/moment.hh\
	$(TASKDIR)/spacepar.hh\
	$(TASKDIR)/search.hh\
	$(TASKDIR)/rendering3D.hh\
    
    

OBJECTS = $(OBJDIR)/bbarolo.o\
	 $(OBJDIR)/header.o\
	 $(OBJDIR)/param.o\
	 $(OBJDIR)/stats.o\
	 $(OBJDIR)/cube.o\
	 $(OBJDIR)/search.o\
	 $(OBJDIR)/image.o\
	 $(OBJDIR)/object2D.o\
	 $(OBJDIR)/object3D.o\
	 $(OBJDIR)/objectgrower.o\
	 $(OBJDIR)/utils.o\
	 $(OBJDIR)/conv2D.o\
	 $(OBJDIR)/smooth3D.o\
	 $(OBJDIR)/moment.o\
	 $(OBJDIR)/galmod.o\
	 $(OBJDIR)/galwind.o\
	 $(OBJDIR)/galfit.o\
	 $(OBJDIR)/galfit_min.o\
	 $(OBJDIR)/galfit_errors.o\
	 $(OBJDIR)/galfit_out.o\
	 $(OBJDIR)/slitfit.o\
	 $(OBJDIR)/spacepar.o\
	 $(OBJDIR)/ringmodel.o\
	 $(OBJDIR)/progressbar.o\
	 $(OBJDIR)/ellprof.o\
	 $(OBJDIR)/string.o\
	 $(OBJDIR)/statistics.o\
	 $(OBJDIR)/interpolation.o\
	 $(OBJDIR)/converter.o\
	 $(OBJDIR)/wcsUtils.o\
	 $(OBJDIR)/fitsUtils.o\
	 $(OBJDIR)/paramguess.o\
	 $(OBJDIR)/BB_interface.o\

bbarolo : builddir $(OBJECTS)
	$(LINK) -o $(EXEC-STUB) $(OBJECTS) $(LIBS) $(OPT)

$(OBJECTS) : $(HEADS)

%.o: %.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 
    
$(OBJDIR)/%.o: $(BASE)/%.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 

$(OBJDIR)/%.o: $(ARRAYDIR)/%.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 

$(OBJDIR)/%.o: $(MAPDIR)/%.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 

$(OBJDIR)/%.o: $(UTILDIR)/%.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 

$(OBJDIR)/%.o: $(TASKDIR)/%.cpp
	$(CXX) $(OPT) -c $< -o $@ $(CINC) 

.cc.o:
	$(CXX) -c $< $(CINC) -o $@ $(OPT)

.c.o:
	$(CC) -c $< $(CINC) -o $@ $(OPT)
    
lib : builddir $(OBJECTS)
	$(AR) $(LIB) $(OBJECTS)
	$(RANLIB) $(LIB)
	$(SHAREDLIB) $(CINC) $(LIBS) -o $(LIBSO) $(OBJECTS)
	rm -rf $(LIBSO_LN) $(LIB_LN)
	$(LN_S) $(LIBSO) $(LIBSO_LN)
	$(LN_S) $(LIB) $(LIB_LN)
#	$(CXX) $(SHAREDFLAGS) -o $(LIBSO) $(OBJECTS)

linux : $(OBJECTS)
	$(LINK) -o BBarololinux $(OBJECTS) $(LIBS)

install : 
	$(INSTALL) -d -m 2755 $(INSTALLDIR)
ifneq ("$(wildcard BBarolo)","")
	cp $(EXEC-STUB) $(EXEC)
	$(RM) $(INSTALLDIR)/$(EXEC-STUB) $(INSTALLDIR)/$(EXEC)
	$(INSTALL) -m 755 $(EXEC) $(INSTALLDIR)
	$(LN_S) $(INSTALLDIR)/$(EXEC) $(INSTALLDIR)/$(EXEC-STUB)
	$(RM) $(EXEC)
else
	@echo "BBarolo executable not found: run 'make' before 'make install'"
endif
ifneq ("$(wildcard BBarolo_MPI)","")
	$(RM) $(INSTALLDIR)/BBarolo_MPI
	$(INSTALL) -m 755 BBarolo_MPI $(INSTALLDIR)
endif

installall : lib install
	-test ! -f $(LIB) || $(INSTALL) -d -m 2755 $(LIBDIR)
	-test ! -f $(LIB) || $(INSTALL) -m 644 $(LIB) $(LIBDIR)
	-test ! -f $(LIB) || cd $(LIBDIR) && $(RM) $(LIB_LN) && $(LN_S) $(LIB) $(LIB_LN)
	-test ! -f $(LIBSO) || $(INSTALL) -m 755 $(LIBSO) $(LIBDIR) && \
	if [ "@SHRLN@" != "" ] ; then \
		cd $(LIBDIR) && $(RM) $(LIBSO_LN) && $(LN_S) $(LIBSO) $(LIBSO_LN); \
	fi
	$(INSTALL) -d -m 2755 $(INCDIR)
	$(INSTALL) -m 644 $(BASE)/*.hh $(INCDIR)
	$(INSTALL) -d -m 2755 $(INCDIR)/Arrays
	$(INSTALL) -m 644 $(ARRAYDIR)/*.hh $(INCDIR)/Arrays
	$(INSTALL) -d -m 2755 $(INCDIR)/Map
	$(INSTALL) -m 644 $(MAPDIR)/*.hh $(INCDIR)/Map
	$(INSTALL) -d -m 2755 $(INCDIR)/Utilities
	$(INSTALL) -m 644 $(UTILDIR)/*.hh $(INCDIR)/Utilities

uninstall :
	$(RM) $(INSTALLDIR)/$(EXEC-STUB) $(INSTALLDIR)/$(EXEC) $(INSTALLDIR)/BBarolo_MPI
	cd $(LIBDIR) && $(RM) $(LIB) $(LIB_LN) $(LIBSO) $(LIBSO_LN)
	$(RM) -r $(INCDIR) 
	
builddir: 
	mkdir -p $(OBJDIR)

.PHONY: clean	
clean : cleanup
	rm -rf $(OBJDIR) $(LIB) $(LIBSO) $(LIB_LN) $(LIBSO_LN)

.PHONY: cleanest
cleanest: clean
	rm -rf Makefile $(EXEC) $(EXEC-STUB)

.PHONY: cleanup	
cleanup:
	rm -rf autom4te.cache config.log config.status setup.log

.PHONY: cleangui
cleangui:
	cd ./src/GUI && make clean

gui :
	cd ./src/GUI  && mv BbaroloGUI.pro BbaroloGUI.or && \
	cp BbaroloGUI.or BbaroloGUI.pro && \
	echo "QMAKE_CC = $(CC) $(OPT) " >> BbaroloGUI.pro &&\
	echo "QMAKE_CXX = $(CXX) $(OPT) " >> BbaroloGUI.pro &&\
	echo "QMAKE_LINK = $(CXX) $(OPT) " >> BbaroloGUI.pro &&\
	echo "QMAKE_LFLAGS -= -stdlib=libc++" >> BbaroloGUI.pro && \
	echo "QMAKE_CFLAGS -= -stdlib=libc++" >> BbaroloGUI.pro && \
	echo "QMAKE_CXXFLAGS -= -stdlib=libc++" >> BbaroloGUI.pro && \
	echo "LIBS += $(LIBS) -static-libgcc -static-libstdc++" >> BbaroloGUI.pro && \
	qmake && \
	rm BbaroloGUI.pro && mv BbaroloGUI.or BbaroloGUI.pro && \
	make
ifeq ($(OPS),MACOSX)
	cp BBarolo ./BBaroloGUI.app/Contents/MacOS/
endif

justgui : 
	cd ./src/GUI && make
ifeq ($(OPS),MACOSX)
	cp BBarolo ./BBaroloGUI.app/Contents/MacOS/
endif
    
all: 
	make && make gui

static: builddir $(OBJECTS)
	$(LINK) -o $(EXEC-STUB) $(OBJECTS) $(STATICLIBS) $(OPT) -static-libgcc -static-libstdc++

guistatic :
	rm -rf ./BBaroloGUI.app/Contents/Resources/qt.conf
	macdeployqt ./BBaroloGUI.app
	$(LINK) -o ./BBaroloGUI.app/Contents/MacOS/BBarolo $(OBJECTS) $(STATICLIBS) -static-libgcc -static-libstdc++

guistaticlinux :
	cd ./src/GUI  && mv BbaroloGUI.pro BbaroloGUI.or && \
	cp BbaroloGUI.or BbaroloGUI.pro && \
	echo "LIBS += $(STATICLIBS) -static-libgcc -static-libstdc++ " >> BbaroloGUI.pro && \
	echo "QMAKE_FLAGS += $(OPT) $(CINC)" >> BbaroloGUI.pro && \
	echo "QMAKE_FLAGS -= -stdlib=libc++" >> BbaroloGUI.pro && \
	echo "QMAKE_LFLAGS -= -stdlib=libc++" >> BbaroloGUI.pro && \
	echo "QMAKE_CC = $(CC)" >> BbaroloGUI.pro &&\
	echo "QMAKE_CXX = $(CXX)" >> BbaroloGUI.pro &&\
	echo "QMAKE_LINK = $(CXX)" >> BbaroloGUI.pro &&\
	export PATH=/home/edt/Downloads/qt/bin/:$(PATH) &&\
	qmake -config release &&\
	rm BbaroloGUI.pro && mv BbaroloGUI.or BbaroloGUI.pro && \
	make && \
	cd ../.. &&\
	$(LINK) -o BBarolo $(OBJECTS) $(STATICLIBS) -static-libgcc -static-libstdc++

mpi: lib
	mpicxx $(FLAGS) -o BBarolo_MPI $(BASE)/bbarolo_mpi.cpp $(LIB) $(LIBS) $(OPT) $(CINC)
    
   
pybb : lib
	mv $(LIB) $(PYBBDIR)
	mv $(LIB_LN) $(PYBBDIR)
	mv $(LIBSO) $(PYBBDIR)
	mv $(LIBSO_LN) $(PYBBDIR)

pybbdist : 
	#python setup.py sdist upload
	python setup.py sdist
	twine upload --repository-url  https://upload.pypi.org/legacy/  dist/*
	rm -rf build dist MANIFEST
    
pybbinst:
	python setup.py install
	rm -rf build dist MANIFEST
	rm -rf pyBBarolo/BBarolo pyBBarolo/libBB*


